!function(){"use strict";angular.module("ngAudioFxCore",[])}(),function(t,e){"use strict";function o(){t.AudioContext=t.AudioContext||t.webkitAudioContext,e.getUserMedia=e.getUserMedia||e.webkitGetUserMedia||e.mozGetUserMedia||e.msGetUserMedia}angular.module("ngAudioFxCore").run(o)}(window||{},navigator||{}),function(){"use strict";function t(){return{deepCopy:function(t){return JSON.parse(JSON.stringify(t))}}}angular.module("ngAudioFxCore").factory("fxUtils",t)}(),function(){"use strict";function t(){var t={};return t.extend=function(e){var o=this.prototype||t,r=Object.create(o);t.copyOwnTo(e,r);var n=r.constructor;if(!(n instanceof Function))throw new Error("You must define a method 'constructor'");return n.prototype=r,n["super"]=o,n.extend=this.extend,n},t.copyOwnTo=function(t,e){return Object.getOwnPropertyNames(t).forEach(function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}),e},t}angular.module("ngAudioFxCore").factory("FxClass",t)}(),function(){"use strict";function t(){return{getContext:function(){if(!e){if(!AudioContext)throw new Error("AudioContext is not supported in your browser!");e=new AudioContext}return e}}}angular.module("ngAudioFxCore").factory("FxSharedAudioContext",t);var e}(),function(){"use strict";function t(t,e){function o(e,o){if(c[e]){var n=t.defer();return n.resolve(c[e]),n.promise}return s[e]?s[e].promise:r(e,o)}function r(e,o){o||(o=new XMLHttpRequest);var r=t.defer();return s[e]=r,o.open("GET",e,!0),o.responseType="arraybuffer",o.onload=function(){n(o.response,r,e)},o.onerror=function(){r.reject("Xhr error",arguments)},o.send(),r.promise}function n(t,o,r){e.getContext().decodeAudioData(t,function(t){s[r]=void 0,c[r]=t,o.resolve(t)},function(t){o.reject("Error decoding file",t)})}function i(){c=[],s=[]}function u(t){c[t]&&(c[t]=void 0),s[t]&&(s[t]=void 0)}var c={},s={};return{_cache:c,_deferreds:s,load:o,clearCache:i,removeFromCache:u,_load:r,_decodeAudio:n}}angular.module("ngAudioFxCore").factory("FxBufferLoader",t),t.$inject=["$q","FxSharedAudioContext"]}(),function(){"use strict";function t(t){var e=t.extend({constructor:function(t,e){this.offsetStart=t||0,this.offsetEnd=e||0},copy:function(t){this.offsetStart=t&&t.offsetStart,this.offsetEnd=t&&t.offsetEnd}}),o=new e(0,0);return t.extend({constructor:function(t,e){if("[object AudioBuffer]"!==Object.prototype.toString.call(t))throw new Error("requires a buffer of type AudioBuffer. see https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer");this.buffer=t,this.presets=angular.copy(o),this.presets&&this.presets.copy(e)},length:function(){return 0}})}angular.module("ngAudioFxCore").factory("FxBaseBuffer",t),t.$inject=["FxClass"]}(),function(){"use strict";function t(t){var e={CONNECTED:"CONNECTED",DISCONNECTED:"DISCONNECTED",PLAYING:"PLAYING",PAUSED:"PAUSED"};return t.extend({constructor:function(o,r){t.call(this,o,r),this.playbackState=e.DISCONNECTED},playbackStates:angular.copy(e),connect:function(t,e){return this.context=t,this.master=e,this.context?(this.source=this.context.createBufferSource(),this.gain=this.context.createGain(),this.source.buffer=this.buffer,this.source.connect(this.gain),this.master?(this.gain.connect(this.master),void(this.playbackState=FxBuffer.playbackStates.CONNECTED)):void(this.playbackState=FxBuffer.playbackStates.DISCONNECTED)):void(this.playbackState=FxBuffer.playbackStates.DISCONNECTED)},disconnect:function(){this.gain.disconnect(),this.source.disconnect(),this.gain=void 0,this.source=void 0,this.playbackState=FxBuffer.playbackStates.DISCONNECTED},length:function(){return this.buffer?(console.log(this.buffer),this.buffer.duration):0},play:function(t,o){if(this.playbackState===e.DISCONNECTED)throw new Error("cannot play, buffer is not connected.");t||(t=0),o||(o=0),t=this.context.currentTime+t;var r=this.length();this.source.start(t,o,r),this.playbackState=FxBuffer.playbackStates.PLAYING},stop:function(){this.playbackState===e.PLAYING&&(this.source.stop(0),this.playbackState=FxBuffer.playbackStates.PAUSED)}})}angular.module("ngAudioFxCore").factory("FxBuffer",t),t.$inject=["FxBaseBuffer"]}();
//# sourceMappingURL=data:application/json;base64,